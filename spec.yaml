swagger: "2.0"
host: api.giantswarm.io
basePath: /v4
schemes:
  - https
info:
  title: The Giant Swarm API v4
  description: Description to be added here
  termsOfService: https://giantswarm.io/terms/
  version: 4.0.1
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
consumes:
  - application/json
produces:
  - application/json

tags:
  - name: tokens
    description: Access to authorization tokens
  - name: users
    description: Access to user resources, settings etc.
  - name: organizations
    description: Access to organizations, members, owned clusters, invoices, usage reports etc.
  - name: clusters
    description: Access to clusters
  - name: cluster nodes
    description: Access to worker or master nodes of a cluster
  - name: key pairs
    description: A key pair is a unique combinations of a X.509 certificate and a private key. Key pairs are used to access the Kubernetes API of a cluster, both with `kubectl` and a web browser.
    externalDocs:
      url: https://docs.giantswarm.io/guides/accessing-services-from-the-outside/
      description: This user guide gives more information on how to use key pairs
  - name: domains
    description: Access to domains usable by an organization
  - name: invoices
    description: Access to invoices
  - name: reports
    description: Access to reports, like the usage report

securityDefinitions:
  Authorization:
    description: Currently the only scheme supported. Requires the auth token to be passed via the `Authorization` header with a value of the format `giantswarm <token>`.
    type: apiKey
    name: Authorization
    in: header


paths:
  /users/:
    get:
      operationId: getUsers
      tags:
        - users
      summary: Get list of users
      description: Fetch list of users. The result depends on the permissions of the user. To find a user account matching a certain email address, the `email` query parameter can be used. Only an exact match will be returned.
      parameters:
        - name: email
          description: Email address to filter by
          required: false
          type: string
          in: query
      responses:
        "200":
          description: Success. The body contains a list of partial user objects. This list may be empty if no users exist or no users match the request parameters.
          schema:
            type: array
            items:
              $ref: 'definitions.yaml#/definitions/User'
          examples:
            application/json:
              - {"id": "123-abc-456-defgh-789-ijk", "email": "foo@example.com"}
              - {"id": "123-abc-456-defgh-789-ijl", "email": "bar@example.net"}
        "400":
          description: Bad request syntax. A detailed error message will be sent as the response body.
          schema:
            $ref: 'definitions.yaml#/definitions/Error'
        "401":
          description: Not authorized
          schema:
            $ref: 'definitions.yaml#/definitions/Error'
    post:
      operationId: addUser
      tags:
        - users
      summary: Create user
      parameters:
        - name: user
          in: body
          description: User details
          required: true
          schema:
            $ref: 'definitions.yaml#/definitions/NewUser'
      responses:
        "201":
          description: Success
          headers:
            Location:
              type: string
              description: URI of the created user
        "401":
          description: Not authorized
          schema:
            $ref: 'definitions.yaml#/definitions/Error'
        "409":
          description: Duplicate not created
          schema:
            $ref: 'definitions.yaml#/definitions/Error'

  /users/{user_id}/:
    get:
      operationId: getUser
      tags:
        - users
      summary: Get user details
      parameters:
        - $ref: 'parameters.yaml#/UserIdPathParameter'
      responses:
        "200":
          description: Success
          schema:
            $ref: 'definitions.yaml#/definitions/User'
          examples:
            application/json:
              id: 123-abc-456-defgh-789-ijk
              email: foo@example.com
              expiry: "2016-12-05T11:20:34Z"
        "404":
          description: Not found
          schema:
            $ref: 'definitions.yaml#/definitions/Error'
    head:
      operationId: checkUser
      tags:
        - users
      summary: Check user existence
      description: This method allows to check if a user with the given `user_id` exists and if the current user has access to it.
      parameters:
        - $ref: 'parameters.yaml#/UserIdPathParameter'
      responses:
        "200":
          description: Success
        "404":
          description: Not found
    patch:
      operationId: updateUser
      tags:
        - users
      summary: Update user
      description: This method allows to modify certain user attributes. The request body must contain a JSON Merge Patch document as described in [RFC 7396](https://tools.ietf.org/html/rfc7396).
      parameters:
        - $ref: 'parameters.yaml#/UserIdPathParameter'
        - name: body
          in: body
          required: true
          description: Changes in JSON Merge Patch format
          schema:
            $ref: 'definitions.yaml#/definitions/UpdateUser'
      responses:
        "204":
          description: Success
    delete:
      operationId: deleteUser
      tags:
        - users
      summary: Delete user
      parameters:
        - $ref: 'parameters.yaml#/UserIdPathParameter'
      responses:
        "204":
          description: Success

  /organizations/:
    get:
      operationId: getOrganizations
      tags:
        - organizations
      summary: Get list of organizations
      parameters:
      - name: name
        in: query
        description: Filter organizations by name
        required: false
        type: string
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
              $ref: 'definitions.yaml#/definitions/OrganizationListItem'

  /organizations/{organization_id}/:
    get:
      operationId: getOrganization
      tags:
        - organizations
      summary: Get organization details
      parameters:
        - $ref: 'parameters.yaml#/OrganizationIdPathParameter'
      responses:
        "200":
          description: Success
          schema:
            $ref: 'definitions.yaml#/definitions/Organization'
    head:
      operationId: checkOrganization
      tags:
        - organizations
      summary: Check organization existence
      parameters:
        - $ref: 'parameters.yaml#/OrganizationIdPathParameter'
      responses:
        "200":
          description: Success
    put:
      operationId: addOrganization
      tags:
        - organizations
      summary: Create organization
      parameters:
        - $ref: 'parameters.yaml#/OrganizationIdPathParameter'
      responses:
        "201":
          description: Success
    patch:
      operationId: updateOrganization
      tags:
        - organizations
      summary: Update organization
      description: The request body must contain a JSON Merge Patch document as described in [RFC 7396](https://tools.ietf.org/html/rfc7396)
      parameters:
        - $ref: 'parameters.yaml#/OrganizationIdPathParameter'
      responses:
        "200":
          description: Success
    delete:
      operationId: deleteOrganization
      tags:
        - organizations
      summary: Delete organization
      parameters:
        - $ref: 'parameters.yaml#/OrganizationIdPathParameter'
      responses:
        "204":
          description: Success

  /organizations/{organization_id}/domains/:
    get:
      operationId: getDomains
      tags:
        - domains
      summary: Get list of domains
      description: Returns a list of domains belonging to the organization specified via `organization_id`.
      parameters:
        - $ref: 'parameters.yaml#/OrganizationIdPathParameter'
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
              $ref: 'definitions.yaml#/definitions/Domain'

  /organizations/{organization_id}/domains/{domain}/:
    get:
      operationId: getDomain
      tags:
        - domains
      summary: Get domain details
      parameters:
        - $ref: 'parameters.yaml#/OrganizationIdPathParameter'
        - $ref: 'parameters.yaml#/DomainPathParameter'
      responses:
        "200":
          description: Success
          schema:
            $ref: 'definitions.yaml#/definitions/Domain'
    head:
      operationId: checkDomain
      tags:
        - domains
      summary: Check domain existence
      parameters:
        - $ref: 'parameters.yaml#/OrganizationIdPathParameter'
        - $ref: 'parameters.yaml#/DomainPathParameter'
      responses:
        "200":
          description: Success
    put:
      operationId: addDomain
      tags:
        - domains
      summary: Add domain
      description: This method allows adding a domain for an organization. After it has been added and validated, a domain (as well as all its sub-domains) can be used for Ingress within any cluster of the organization.
      parameters:
        - $ref: 'parameters.yaml#/OrganizationIdPathParameter'
      responses:
        "201":
          description: Success

    delete:
      operationId: deleteDomain
      tags:
        - domains
      summary: Delete domain
      parameters:
        - $ref: 'parameters.yaml#/OrganizationIdPathParameter'
        - $ref: 'parameters.yaml#/DomainPathParameter'
      responses:
        "204":
          description: Success

  /organizations/{organization_id}/invoices/:
    get:
      operationId: getInvoices
      tags:
        - invoices
      summary: Get list of invoices
      description: Returns a list of invoices for the organization specified via `organization_id`.
      parameters:
        - $ref: 'parameters.yaml#/OrganizationIdPathParameter'
      responses:
        "200":
          description: Success

  /organizations/{organization_id}/invoices/{invoice_number}/:
    get:
      operationId: getInvoice
      tags:
        - invoices
      summary: Get invoice details
      parameters:
        - $ref: 'parameters.yaml#/OrganizationIdPathParameter'
        - $ref: 'parameters.yaml#/InvoiceNumberPathParameter'
      responses:
        "200":
          description: Success
    head:
      operationId: checkInvoice
      tags:
        - invoices
      summary: Check invoice existence
      parameters:
        - $ref: 'parameters.yaml#/OrganizationIdPathParameter'
        - $ref: 'parameters.yaml#/InvoiceNumberPathParameter'
      responses:
        "200":
          description: Success

  /organizations/{organization_id}/invoices/{invoice_number}/download/:
    get:
      operationId: downloadInvoices
      tags:
        - invoices
      summary: Download invoice document
      parameters:
        - $ref: 'parameters.yaml#/OrganizationIdPathParameter'
        - $ref: 'parameters.yaml#/InvoiceNumberPathParameter'
      produces:
      - application/pdf
      responses:
        "200":
          description: Success
    head:
      operationId: checkInvoiceDownload
      tags:
        - invoices
      summary: Check invoice document existence
      parameters:
        - $ref: 'parameters.yaml#/OrganizationIdPathParameter'
        - $ref: 'parameters.yaml#/InvoiceNumberPathParameter'
      responses:
        "200":
          description: Success

  /organizations/{organization_id}/usage-reports/:
    get:
      operationId: getUsageReports
      tags:
        - reports
      summary: Get list of reports
      description: Returns a list of reports for the organization specified via `organization_id`.
      parameters:
        - $ref: 'parameters.yaml#/OrganizationIdPathParameter'
      responses:
        "200":
          description: Success

  /organizations/{organization_id}/usage-reports/{id}/:
    get:
      operationId: getUsageReport
      tags:
        - reports
      summary: Get details on usage report
      parameters:
        - $ref: 'parameters.yaml#/OrganizationIdPathParameter'
        - name: id
          in: path
          required: true
          type: string
      responses:
        "200":
          description: Success
    head:
      operationId: checkUsageReport
      tags:
        - reports
      summary: Check usage report existence and access
      parameters:
        - $ref: 'parameters.yaml#/OrganizationIdPathParameter'
        - name: id
          in: path
          required: true
          type: string
      responses:
        "200":
          description: Success

  /organizations/{organization_id}/usage-reports/{id}/download/:
    get:
      operationId: downloadUsageReport
      tags:
        - reports
      summary: Download usage report
      parameters:
        - $ref: 'parameters.yaml#/OrganizationIdPathParameter'
        - name: id
          in: path
          required: true
          type: string
      produces:
      - text/csv
      responses:
        "200":
          description: Success
    head:
      operationId: checkUsageReportDownload
      tags:
        - reports
      summary: Check usage report download existence and access
      parameters:
        - $ref: 'parameters.yaml#/OrganizationIdPathParameter'
        - name: id
          in: path
          required: true
          type: string
      responses:
        "200":
          description: Success

  /clusters/:
    get:
      operationId: getClusters
      tags:
        - clusters
      summary: Get list of clusters
      description: Lists all clusters the current user has permissions to know about.
      responses:
        "200":
          description: Success
    post:
      operationId: addCluster
      tags:
        - clusters
      summary: Create cluster
      responses:
        "200":
          description: Success

  /clusters/{cluster_id}/:
    get:
      operationId: getCluster
      tags:
        - clusters
      summary: Get cluster details
      parameters:
        - $ref: 'parameters.yaml#/ClusterIdPathParameter'
      responses:
        "200":
          description: Success
    head:
      operationId: checkCluster
      tags:
        - clusters
      summary: Check cluster existence
      parameters:
        - $ref: 'parameters.yaml#/ClusterIdPathParameter'
      responses:
        "200":
          description: Success
    patch:
      operationId: updateCluster
      tags:
        - clusters
      summary: Update cluster
      description: Update details of a cluster, e. g. the cluster name. The request body must contain a JSON Merge Patch document as described in [RFC 7396](https://tools.ietf.org/html/rfc7396)
      parameters:
        - $ref: 'parameters.yaml#/ClusterIdPathParameter'
      responses:
        "204":
          description: Success
    delete:
      operationId: deleteCluster
      tags:
        - clusters
      summary: Delete cluster
      parameters:
        - $ref: 'parameters.yaml#/ClusterIdPathParameter'
      responses:
        "204":
          description: Success

  /clusters/{cluster_id}/key-pairs/:
    get:
      operationId: getKeyPairs
      tags:
        - key pairs
      summary: Get list of key pairs
      parameters:
        - $ref: 'parameters.yaml#/ClusterIdPathParameter'
      responses:
        "200":
          description: Success
    post:
      operationId: addKeyPair
      tags:
        - key pairs
      summary: Add key pair
      parameters:
        - $ref: 'parameters.yaml#/ClusterIdPathParameter'
      responses:
        "200":
          description: Success

  /clusters/{cluster_id}/key-pairs/{id}/:
    get:
      operationId: getKeyPair
      tags:
        - key pairs
      summary: Get  key pair details
      description: This method returns metadata on a key pair. However it *does not* return the actual certificate and private key data, which can only be accessed on key pair creation.
      parameters:
        - $ref: 'parameters.yaml#/ClusterIdPathParameter'
        - name: id
          in: path
          required: true
          type: string
          description: ID of the key pair to retrieve information for
      responses:
        "200":
          description: Success
    head:
      operationId: checkKeyPair
      tags:
        - key pairs
      summary: Check key pair existence
      parameters:
        - $ref: 'parameters.yaml#/ClusterIdPathParameter'
        - name: id
          in: path
          required: true
          type: string
          description: ID of the key pair
      responses:
        "200":
          description: Success
    delete:
      operationId: deleteKeyPair
      tags:
        - key pairs
      summary: Revoke key pair
      parameters:
        - $ref: 'parameters.yaml#/ClusterIdPathParameter'
        - name: id
          in: path
          required: true
          type: string
          description: ID of the key pair to revoke
      responses:
        "204":
          description: Success

  /clusters/{cluster_id}/workers/:
    get:
      operationId: getWorkers
      tags:
        - cluster nodes
      summary: Get list of worker nodes for a cluster
      parameters:
        - $ref: 'parameters.yaml#/ClusterIdPathParameter'
      responses:
        "200":
          description: Success
    post:
      operationId: addWorker
      tags:
        - cluster nodes
      summary: Add workers to a cluster
      parameters:
        - $ref: 'parameters.yaml#/ClusterIdPathParameter'
      responses:
        "204":
          description: Success

  /clusters/{cluster_id}/workers/{worker_id}/:
    get:
      operationId: getWorker
      tags:
        - cluster nodes
      summary: Get info on a worker node
      parameters:
        - $ref: 'parameters.yaml#/ClusterIdPathParameter'
        - name: worker_id
          in: path
          required: true
          type: string
      responses:
        "200":
          description: Success
    head:
      operationId: checkWorker
      tags:
        - cluster nodes
      summary: Check worker node existence and access
      parameters:
        - $ref: 'parameters.yaml#/ClusterIdPathParameter'
        - name: worker_id
          in: path
          required: true
          type: string
      responses:
        "200":
          description: Success
    patch:
      operationId: updateWorker
      tags:
        - cluster nodes
      summary: Update worker node details
      description: The request body must contain a JSON Merge Patch document as described in [RFC 7396](https://tools.ietf.org/html/rfc7396)
      parameters:
        - $ref: 'parameters.yaml#/ClusterIdPathParameter'
        - name: worker_id
          in: path
          required: true
          type: string
      responses:
        "204":
          description: Success
    delete:
      operationId: deleteWorker
      tags:
        - cluster nodes
      summary: Delete a worker node
      parameters:
        - $ref: 'parameters.yaml#/ClusterIdPathParameter'
        - name: worker_id
          in: path
          required: true
          type: string
      responses:
        "204":
          description: Success

  /clusters/{cluster_id}/masters/:
    get:
      operationId: getMasters
      tags:
        - cluster nodes
      summary: Get list of master nodes for a cluster
      parameters:
        - $ref: 'parameters.yaml#/ClusterIdPathParameter'
      responses:
        "200":
          description: Success
    post:
      operationId: addMaster
      tags:
        - cluster nodes
      summary: Add masters to a cluster
      parameters:
        - $ref: 'parameters.yaml#/ClusterIdPathParameter'
      responses:
        "204":
          description: Success

  /clusters/{cluster_id}/masters/{master_id}/:
    get:
      operationId: getMaster
      tags:
        - cluster nodes
      summary: Get info on a master node
      parameters:
        - $ref: 'parameters.yaml#/ClusterIdPathParameter'
        - name: master_id
          in: path
          required: true
          type: string
      responses:
        "200":
          description: Success
    head:
      operationId: checkMaster
      tags:
        - cluster nodes
      summary: Check master node existence and access
      parameters:
        - $ref: 'parameters.yaml#/ClusterIdPathParameter'
        - name: master_id
          in: path
          required: true
          type: string
      responses:
        "200":
          description: Success
    patch:
      operationId: updateMaster
      tags:
        - cluster nodes
      summary: Update master node details
      description: The request body must contain a JSON Merge Patch document as described in [RFC 7396](https://tools.ietf.org/html/rfc7396)
      parameters:
        - $ref: 'parameters.yaml#/ClusterIdPathParameter'
        - name: master_id
          in: path
          required: true
          type: string
      responses:
        "204":
          description: Success
    delete:
      operationId: deleteMaster
      tags:
        - cluster nodes
      summary: Delete a master node
      parameters:
        - $ref: 'parameters.yaml#/ClusterIdPathParameter'
        - name: master_id
          in: path
          required: true
          type: string
      responses:
        "204":
          description: Success
  /tokens/:
    get:
      operationId: getTokens
      tags:
        - tokens
      summary: Get list of tokens
      description: This methods returns a list of tokens the current user has access to.
      responses:
        "200":
          description: Success
    post:
      operationId: addToken
      tags:
        - tokens
      summary: Create token
      description: This method allows to create a new token to be used for a client session or API access.
      responses:
        "201":
          description: Created

  /tokens/info/:
    post:
      operationId: getToken
      tags:
        - tokens
      summary: Get token details
      description: For security reasons, information on a token is queried using `POST` requests with JSON request body.
      responses:
        "200":
          description: Success

  /tokens/delete/:
    post:
      operationId: deleteToken
      tags:
        - tokens
      summary: Delete token
      description: |
        Deletes a token. In a consequence, this token can no longer be used to authenticate requests.

        As a consequence, clients using this token will effectively be logged out.

        For security reasons, deleting a token is done using a `POST` requests with JSON request body.
      responses:
        "204":
          description: Success
